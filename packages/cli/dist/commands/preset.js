"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.presetCommand = presetCommand;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const chalk_1 = __importDefault(require("chalk"));
const prompts_1 = __importDefault(require("prompts"));
function presetCommand() {
    return __awaiter(this, void 0, void 0, function* () {
        console.log(chalk_1.default.bold("Generating NativeCN preset file..."));
        const presetContent = `/**
 * NativeCN default theme preset for tailwindcss
 * Generated by NativeCN CLI
 */

module.exports = {
  theme: {
    extend: {
      colors: {
        // Light theme colors
        background: "#ffffff",
        foreground: "#252525",
        card: "#ffffff",
        "card-foreground": "#252525",
        popover: "#ffffff",
        "popover-foreground": "#252525",
        primary: "#343434",
        "primary-foreground": "#fbfbfb",
        secondary: "#f7f7f7",
        "secondary-foreground": "#343434",
        muted: "#f7f7f7",
        "muted-foreground": "#8d8d8d",
        accent: "#f7f7f7",
        "accent-foreground": "#343434",
        destructive: "#e13636",
        "destructive-foreground": "#e13636",
        border: "#ebebeb",
        input: "#ebebeb",
        ring: "#b4b4b4",
        
        // Dark mode colors
        dark: {
          background: "#252525",
          foreground: "#fbfbfb",
          card: "#252525",
          "card-foreground": "#fbfbfb",
          popover: "#252525",
          "popover-foreground": "#fbfbfb",
          primary: "#fbfbfb",
          "primary-foreground": "#343434",
          secondary: "#444444",
          "secondary-foreground": "#fbfbfb",
          muted: "#444444",
          "muted-foreground": "#b4b4b4",
          accent: "#444444",
          "accent-foreground": "#fbfbfb",
          destructive: "#9e2626",
          "destructive-foreground": "#f85d5d",
          border: "#444444",
          input: "#444444",
          ring: "#8d8d8d",
        },
        
        // Sidebar colors
        sidebar: {
          DEFAULT: "#fbfbfb",
          foreground: "#252525",
          primary: "#343434",
          "primary-foreground": "#fbfbfb",
          accent: "#f7f7f7",
          "accent-foreground": "#343434",
          border: "#ebebeb",
          ring: "#b4b4b4",
        },
        
        "sidebar-dark": {
          DEFAULT: "#343434",
          foreground: "#fbfbfb",
          primary: "#5e46ff",
          "primary-foreground": "#fbfbfb",
          accent: "#444444",
          "accent-foreground": "#fbfbfb",
          border: "#444444",
          ring: "#707070",
        },
      },
      borderRadius: {
        xl: 16,
        lg: 10,
        md: 8,
        sm: 6,
      },
    },
  },
}`;
        // Write the preset file to the user's project
        const userPresetPath = path_1.default.join(process.cwd(), 'nativecn-preset.js');
        // Check if the file already exists
        if (yield fs_extra_1.default.pathExists(userPresetPath)) {
            const overwriteResponse = yield (0, prompts_1.default)({
                type: "confirm",
                name: "overwrite",
                message: "nativecn-preset.js already exists. Overwrite?",
                initial: true
            });
            if (overwriteResponse.overwrite) {
                yield fs_extra_1.default.writeFile(userPresetPath, presetContent);
                console.log(chalk_1.default.green("✓"), "Updated nativecn-preset.js in your project");
            }
            else {
                console.log(chalk_1.default.yellow("Operation cancelled"));
                return;
            }
        }
        else {
            yield fs_extra_1.default.writeFile(userPresetPath, presetContent);
            console.log(chalk_1.default.green("✓"), "Created nativecn-preset.js in your project");
        }
        console.log("\nTo use this preset, add it to your tailwind.config.js:");
        console.log("\npresets: [require('./nativecn-preset')],");
    });
}
